# Generated by Django 3.0.3 on 2021-06-10 23:38

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ArizonaBirds',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gbifid', models.TextField(blank=True, null=True)),
                ('individualcount', models.IntegerField(blank=True, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('genus', models.TextField(blank=True, null=True)),
                ('species', models.TextField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'arizona_birds',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MaricopaBirds',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gbifid', models.TextField(blank=True, null=True)),
                ('individualcount', models.IntegerField(blank=True, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('genus', models.TextField(blank=True, null=True)),
                ('species', models.TextField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('geom', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'maricopa_birds',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TestingInput',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gbifid', models.TextField(blank=True, null=True)),
                ('abstract', models.TextField(blank=True, null=True)),
                ('accessrights', models.TextField(blank=True, null=True)),
                ('accrualmethod', models.TextField(blank=True, null=True)),
                ('accrualperiodicity', models.TextField(blank=True, null=True)),
                ('accrualpolicy', models.TextField(blank=True, null=True)),
                ('alternative', models.TextField(blank=True, null=True)),
                ('audience', models.TextField(blank=True, null=True)),
                ('available', models.TextField(blank=True, null=True)),
                ('bibliographiccitation', models.TextField(blank=True, null=True)),
                ('conformsto', models.TextField(blank=True, null=True)),
                ('contributor', models.TextField(blank=True, null=True)),
                ('coverage', models.TextField(blank=True, null=True)),
                ('created', models.TextField(blank=True, null=True)),
                ('creator', models.TextField(blank=True, null=True)),
                ('date', models.TextField(blank=True, null=True)),
                ('dateaccepted', models.TextField(blank=True, null=True)),
                ('datecopyrighted', models.TextField(blank=True, null=True)),
                ('datesubmitted', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('educationlevel', models.TextField(blank=True, null=True)),
                ('extent', models.TextField(blank=True, null=True)),
                ('format', models.TextField(blank=True, null=True)),
                ('hasformat', models.TextField(blank=True, null=True)),
                ('haspart', models.TextField(blank=True, null=True)),
                ('hasversion', models.TextField(blank=True, null=True)),
                ('identifier', models.TextField(blank=True, null=True)),
                ('instructionalmethod', models.TextField(blank=True, null=True)),
                ('isformatof', models.TextField(blank=True, null=True)),
                ('ispartof', models.TextField(blank=True, null=True)),
                ('isreferencedby', models.TextField(blank=True, null=True)),
                ('isreplacedby', models.TextField(blank=True, null=True)),
                ('isrequiredby', models.TextField(blank=True, null=True)),
                ('isversionof', models.TextField(blank=True, null=True)),
                ('issued', models.TextField(blank=True, null=True)),
                ('language', models.TextField(blank=True, null=True)),
                ('license', models.TextField(blank=True, null=True)),
                ('mediator', models.TextField(blank=True, null=True)),
                ('medium', models.TextField(blank=True, null=True)),
                ('modified', models.TextField(blank=True, null=True)),
                ('provenance', models.TextField(blank=True, null=True)),
                ('publisher', models.TextField(blank=True, null=True)),
                ('references', models.TextField(blank=True, null=True)),
                ('relation', models.TextField(blank=True, null=True)),
                ('replaces', models.TextField(blank=True, null=True)),
                ('requires', models.TextField(blank=True, null=True)),
                ('rights', models.TextField(blank=True, null=True)),
                ('rightsholder', models.TextField(blank=True, null=True)),
                ('source', models.TextField(blank=True, null=True)),
                ('spatial', models.TextField(blank=True, null=True)),
                ('subject', models.TextField(blank=True, null=True)),
                ('tableofcontents', models.TextField(blank=True, null=True)),
                ('temporal', models.TextField(blank=True, null=True)),
                ('title', models.TextField(blank=True, null=True)),
                ('type', models.TextField(blank=True, null=True)),
                ('valid', models.TextField(blank=True, null=True)),
                ('institutionid', models.TextField(blank=True, null=True)),
                ('collectionid', models.TextField(blank=True, null=True)),
                ('datasetid', models.TextField(blank=True, null=True)),
                ('institutioncode', models.TextField(blank=True, null=True)),
                ('collectioncode', models.TextField(blank=True, null=True)),
                ('datasetname', models.TextField(blank=True, null=True)),
                ('ownerinstitutioncode', models.TextField(blank=True, null=True)),
                ('basisofrecord', models.TextField(blank=True, null=True)),
                ('informationwithheld', models.TextField(blank=True, null=True)),
                ('datageneralizations', models.TextField(blank=True, null=True)),
                ('dynamicproperties', models.TextField(blank=True, null=True)),
                ('occurrenceid', models.TextField(blank=True, null=True)),
                ('catalognumber', models.TextField(blank=True, null=True)),
                ('recordnumber', models.TextField(blank=True, null=True)),
                ('recordedby', models.TextField(blank=True, null=True)),
                ('individualcount', models.IntegerField(blank=True, null=True)),
                ('organismquantity', models.TextField(blank=True, null=True)),
                ('organismquantitytype', models.TextField(blank=True, null=True)),
                ('sex', models.TextField(blank=True, null=True)),
                ('lifestage', models.TextField(blank=True, null=True)),
                ('reproductivecondition', models.TextField(blank=True, null=True)),
                ('behavior', models.TextField(blank=True, null=True)),
                ('establishmentmeans', models.TextField(blank=True, null=True)),
                ('occurrencestatus', models.TextField(blank=True, null=True)),
                ('preparations', models.TextField(blank=True, null=True)),
                ('disposition', models.TextField(blank=True, null=True)),
                ('associatedreferences', models.TextField(blank=True, null=True)),
                ('associatedsequences', models.TextField(blank=True, null=True)),
                ('associatedtaxa', models.TextField(blank=True, null=True)),
                ('othercatalognumbers', models.TextField(blank=True, null=True)),
                ('occurrenceremarks', models.TextField(blank=True, null=True)),
                ('organismid', models.TextField(blank=True, null=True)),
                ('organismname', models.TextField(blank=True, null=True)),
                ('organismscope', models.TextField(blank=True, null=True)),
                ('associatedoccurrences', models.TextField(blank=True, null=True)),
                ('associatedorganisms', models.TextField(blank=True, null=True)),
                ('previousidentifications', models.TextField(blank=True, null=True)),
                ('organismremarks', models.TextField(blank=True, null=True)),
                ('materialsampleid', models.TextField(blank=True, null=True)),
                ('eventid', models.TextField(blank=True, null=True)),
                ('parenteventid', models.TextField(blank=True, null=True)),
                ('fieldnumber', models.TextField(blank=True, null=True)),
                ('eventdate', models.TextField(blank=True, null=True)),
                ('eventtime', models.TextField(blank=True, null=True)),
                ('startdayofyear', models.TextField(blank=True, null=True)),
                ('enddayofyear', models.TextField(blank=True, null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('month', models.IntegerField(blank=True, null=True)),
                ('day', models.IntegerField(blank=True, null=True)),
                ('verbatimeventdate', models.TextField(blank=True, null=True)),
                ('habitat', models.TextField(blank=True, null=True)),
                ('samplingprotocol', models.TextField(blank=True, null=True)),
                ('samplingeffort', models.TextField(blank=True, null=True)),
                ('samplesizevalue', models.TextField(blank=True, null=True)),
                ('samplesizeunit', models.TextField(blank=True, null=True)),
                ('fieldnotes', models.TextField(blank=True, null=True)),
                ('eventremarks', models.TextField(blank=True, null=True)),
                ('locationid', models.TextField(blank=True, null=True)),
                ('highergeographyid', models.TextField(blank=True, null=True)),
                ('highergeography', models.TextField(blank=True, null=True)),
                ('continent', models.TextField(blank=True, null=True)),
                ('waterbody', models.TextField(blank=True, null=True)),
                ('islandgroup', models.TextField(blank=True, null=True)),
                ('island', models.TextField(blank=True, null=True)),
                ('countrycode', models.TextField(blank=True, null=True)),
                ('stateprovince', models.TextField(blank=True, null=True)),
                ('county', models.TextField(blank=True, null=True)),
                ('municipality', models.TextField(blank=True, null=True)),
                ('locality', models.TextField(blank=True, null=True)),
                ('verbatimlocality', models.TextField(blank=True, null=True)),
                ('verbatimelevation', models.TextField(blank=True, null=True)),
                ('verbatimdepth', models.TextField(blank=True, null=True)),
                ('minimumdistanceabovesurfaceinmeters', models.TextField(blank=True, null=True)),
                ('maximumdistanceabovesurfaceinmeters', models.TextField(blank=True, null=True)),
                ('locationaccordingto', models.TextField(blank=True, null=True)),
                ('locationremarks', models.TextField(blank=True, null=True)),
                ('decimallatitude', models.FloatField(blank=True, null=True)),
                ('decimallongitude', models.FloatField(blank=True, null=True)),
                ('coordinateuncertaintyinmeters', models.TextField(blank=True, null=True)),
                ('coordinateprecision', models.TextField(blank=True, null=True)),
                ('pointradiusspatialfit', models.TextField(blank=True, null=True)),
                ('verbatimcoordinatesystem', models.TextField(blank=True, null=True)),
                ('verbatimsrs', models.TextField(blank=True, null=True)),
                ('footprintwkt', models.TextField(blank=True, null=True)),
                ('footprintsrs', models.TextField(blank=True, null=True)),
                ('footprintspatialfit', models.TextField(blank=True, null=True)),
                ('georeferencedby', models.TextField(blank=True, null=True)),
                ('georeferenceddate', models.TextField(blank=True, null=True)),
                ('georeferenceprotocol', models.TextField(blank=True, null=True)),
                ('georeferencesources', models.TextField(blank=True, null=True)),
                ('georeferenceverificationstatus', models.TextField(blank=True, null=True)),
                ('georeferenceremarks', models.TextField(blank=True, null=True)),
                ('geologicalcontextid', models.TextField(blank=True, null=True)),
                ('earliesteonorlowesteonothem', models.TextField(blank=True, null=True)),
                ('latesteonorhighesteonothem', models.TextField(blank=True, null=True)),
                ('earliesteraorlowesterathem', models.TextField(blank=True, null=True)),
                ('latesteraorhighesterathem', models.TextField(blank=True, null=True)),
                ('earliestperiodorlowestsystem', models.TextField(blank=True, null=True)),
                ('latestperiodorhighestsystem', models.TextField(blank=True, null=True)),
                ('earliestepochorlowestseries', models.TextField(blank=True, null=True)),
                ('latestepochorhighestseries', models.TextField(blank=True, null=True)),
                ('earliestageorloweststage', models.TextField(blank=True, null=True)),
                ('latestageorhigheststage', models.TextField(blank=True, null=True)),
                ('lowestbiostratigraphiczone', models.TextField(blank=True, null=True)),
                ('highestbiostratigraphiczone', models.TextField(blank=True, null=True)),
                ('lithostratigraphicterms', models.TextField(blank=True, null=True)),
                ('group', models.TextField(blank=True, null=True)),
                ('formation', models.TextField(blank=True, null=True)),
                ('member', models.TextField(blank=True, null=True)),
                ('bed', models.TextField(blank=True, null=True)),
                ('identificationid', models.TextField(blank=True, null=True)),
                ('identificationqualifier', models.TextField(blank=True, null=True)),
                ('typestatus', models.TextField(blank=True, null=True)),
                ('identifiedby', models.TextField(blank=True, null=True)),
                ('dateidentified', models.TextField(blank=True, null=True)),
                ('identificationreferences', models.TextField(blank=True, null=True)),
                ('identificationverificationstatus', models.TextField(blank=True, null=True)),
                ('identificationremarks', models.TextField(blank=True, null=True)),
                ('taxonid', models.TextField(blank=True, null=True)),
                ('scientificnameid', models.TextField(blank=True, null=True)),
                ('acceptednameusageid', models.TextField(blank=True, null=True)),
                ('parentnameusageid', models.TextField(blank=True, null=True)),
                ('originalnameusageid', models.TextField(blank=True, null=True)),
                ('nameaccordingtoid', models.TextField(blank=True, null=True)),
                ('namepublishedinid', models.TextField(blank=True, null=True)),
                ('taxonconceptid', models.TextField(blank=True, null=True)),
                ('scientificname', models.TextField(blank=True, null=True)),
                ('acceptednameusage', models.TextField(blank=True, null=True)),
                ('parentnameusage', models.TextField(blank=True, null=True)),
                ('originalnameusage', models.TextField(blank=True, null=True)),
                ('nameaccordingto', models.TextField(blank=True, null=True)),
                ('namepublishedin', models.TextField(blank=True, null=True)),
                ('namepublishedinyear', models.TextField(blank=True, null=True)),
                ('higherclassification', models.TextField(blank=True, null=True)),
                ('kingdom', models.TextField(blank=True, null=True)),
                ('phylum', models.TextField(blank=True, null=True)),
                ('class_field', models.TextField(blank=True, db_column='class', null=True)),
                ('order1', models.TextField(blank=True, null=True)),
                ('family', models.TextField(blank=True, null=True)),
                ('genus', models.TextField(blank=True, null=True)),
                ('subgenus', models.TextField(blank=True, null=True)),
                ('specificepithet', models.TextField(blank=True, null=True)),
                ('infraspecificepithet', models.TextField(blank=True, null=True)),
                ('taxonrank', models.TextField(blank=True, null=True)),
                ('verbatimtaxonrank', models.TextField(blank=True, null=True)),
                ('vernacularname', models.TextField(blank=True, null=True)),
                ('nomenclaturalcode', models.TextField(blank=True, null=True)),
                ('taxonomicstatus', models.TextField(blank=True, null=True)),
                ('nomenclaturalstatus', models.TextField(blank=True, null=True)),
                ('taxonremarks', models.TextField(blank=True, null=True)),
                ('datasetkey', models.TextField(blank=True, null=True)),
                ('publishingcountry', models.TextField(blank=True, null=True)),
                ('lastinterpreted', models.TextField(blank=True, null=True)),
                ('elevation', models.TextField(blank=True, null=True)),
                ('elevationaccuracy', models.TextField(blank=True, null=True)),
                ('depth', models.TextField(blank=True, null=True)),
                ('depthaccuracy', models.TextField(blank=True, null=True)),
                ('distanceabovesurface', models.TextField(blank=True, null=True)),
                ('distanceabovesurfaceaccuracy', models.TextField(blank=True, null=True)),
                ('issue', models.TextField(blank=True, null=True)),
                ('mediatype', models.TextField(blank=True, null=True)),
                ('hascoordinate', models.TextField(blank=True, null=True)),
                ('hasgeospatialissues', models.TextField(blank=True, null=True)),
                ('taxonkey', models.TextField(blank=True, null=True)),
                ('acceptedtaxonkey', models.TextField(blank=True, null=True)),
                ('kingdomkey', models.IntegerField(blank=True, null=True)),
                ('phylumkey', models.IntegerField(blank=True, null=True)),
                ('classkey', models.IntegerField(blank=True, null=True)),
                ('orderkey', models.IntegerField(blank=True, null=True)),
                ('familykey', models.IntegerField(blank=True, null=True)),
                ('genuskey', models.IntegerField(blank=True, null=True)),
                ('subgenuskey', models.IntegerField(blank=True, null=True)),
                ('specieskey', models.IntegerField(blank=True, null=True)),
                ('species', models.TextField(blank=True, null=True)),
                ('genericname', models.TextField(blank=True, null=True)),
                ('acceptedscientificname', models.TextField(blank=True, null=True)),
                ('verbatimscientificname', models.TextField(blank=True, null=True)),
                ('typifiedname', models.TextField(blank=True, null=True)),
                ('protocol', models.TextField(blank=True, null=True)),
                ('lastparsed', models.TextField(blank=True, null=True)),
                ('lastcrawled', models.TextField(blank=True, null=True)),
                ('repatriated', models.TextField(blank=True, null=True)),
                ('relativeorganismquantity', models.TextField(blank=True, null=True)),
                ('recordedbyid', models.TextField(blank=True, null=True)),
                ('identifiedbyid', models.TextField(blank=True, null=True)),
                ('level0gid', models.TextField(blank=True, null=True)),
                ('level0name', models.TextField(blank=True, null=True)),
                ('level1gid', models.TextField(blank=True, null=True)),
                ('level1name', models.TextField(blank=True, null=True)),
                ('level2gid', models.TextField(blank=True, null=True)),
                ('level2name', models.TextField(blank=True, null=True)),
                ('level3gid', models.TextField(blank=True, null=True)),
                ('level3name', models.TextField(blank=True, null=True)),
                ('iucnredlistcategory', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'testing_input',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TestingSubset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gbifid', models.TextField(blank=True, null=True)),
                ('abstract', models.TextField(blank=True, null=True)),
                ('accessrights', models.TextField(blank=True, null=True)),
                ('accrualmethod', models.TextField(blank=True, null=True)),
                ('accrualperiodicity', models.TextField(blank=True, null=True)),
                ('accrualpolicy', models.TextField(blank=True, null=True)),
                ('alternative', models.TextField(blank=True, null=True)),
                ('audience', models.TextField(blank=True, null=True)),
                ('available', models.TextField(blank=True, null=True)),
                ('bibliographiccitation', models.TextField(blank=True, null=True)),
                ('conformsto', models.TextField(blank=True, null=True)),
                ('contributor', models.TextField(blank=True, null=True)),
                ('coverage', models.TextField(blank=True, null=True)),
                ('created', models.TextField(blank=True, null=True)),
                ('creator', models.TextField(blank=True, null=True)),
                ('date', models.TextField(blank=True, null=True)),
                ('dateaccepted', models.TextField(blank=True, null=True)),
                ('datecopyrighted', models.TextField(blank=True, null=True)),
                ('datesubmitted', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('educationlevel', models.TextField(blank=True, null=True)),
                ('extent', models.TextField(blank=True, null=True)),
                ('format', models.TextField(blank=True, null=True)),
                ('hasformat', models.TextField(blank=True, null=True)),
                ('haspart', models.TextField(blank=True, null=True)),
                ('hasversion', models.TextField(blank=True, null=True)),
                ('identifier', models.TextField(blank=True, null=True)),
                ('instructionalmethod', models.TextField(blank=True, null=True)),
                ('isformatof', models.TextField(blank=True, null=True)),
                ('ispartof', models.TextField(blank=True, null=True)),
                ('isreferencedby', models.TextField(blank=True, null=True)),
                ('isreplacedby', models.TextField(blank=True, null=True)),
                ('isrequiredby', models.TextField(blank=True, null=True)),
                ('isversionof', models.TextField(blank=True, null=True)),
                ('issued', models.TextField(blank=True, null=True)),
                ('language', models.TextField(blank=True, null=True)),
                ('license', models.TextField(blank=True, null=True)),
                ('mediator', models.TextField(blank=True, null=True)),
                ('medium', models.TextField(blank=True, null=True)),
                ('modified', models.TextField(blank=True, null=True)),
                ('provenance', models.TextField(blank=True, null=True)),
                ('publisher', models.TextField(blank=True, null=True)),
                ('references', models.TextField(blank=True, null=True)),
                ('relation', models.TextField(blank=True, null=True)),
                ('replaces', models.TextField(blank=True, null=True)),
                ('requires', models.TextField(blank=True, null=True)),
                ('rights', models.TextField(blank=True, null=True)),
                ('rightsholder', models.TextField(blank=True, null=True)),
                ('source', models.TextField(blank=True, null=True)),
                ('spatial', models.TextField(blank=True, null=True)),
                ('subject', models.TextField(blank=True, null=True)),
                ('tableofcontents', models.TextField(blank=True, null=True)),
                ('temporal', models.TextField(blank=True, null=True)),
                ('title', models.TextField(blank=True, null=True)),
                ('type', models.TextField(blank=True, null=True)),
                ('valid', models.TextField(blank=True, null=True)),
                ('institutionid', models.TextField(blank=True, null=True)),
                ('collectionid', models.TextField(blank=True, null=True)),
                ('datasetid', models.TextField(blank=True, null=True)),
                ('institutioncode', models.TextField(blank=True, null=True)),
                ('collectioncode', models.TextField(blank=True, null=True)),
                ('datasetname', models.TextField(blank=True, null=True)),
                ('ownerinstitutioncode', models.TextField(blank=True, null=True)),
                ('basisofrecord', models.TextField(blank=True, null=True)),
                ('informationwithheld', models.TextField(blank=True, null=True)),
                ('datageneralizations', models.TextField(blank=True, null=True)),
                ('dynamicproperties', models.TextField(blank=True, null=True)),
                ('occurrenceid', models.TextField(blank=True, null=True)),
                ('catalognumber', models.TextField(blank=True, null=True)),
                ('recordnumber', models.TextField(blank=True, null=True)),
                ('recordedby', models.TextField(blank=True, null=True)),
                ('individualcount', models.IntegerField(blank=True, null=True)),
                ('organismquantity', models.TextField(blank=True, null=True)),
                ('organismquantitytype', models.TextField(blank=True, null=True)),
                ('sex', models.TextField(blank=True, null=True)),
                ('lifestage', models.TextField(blank=True, null=True)),
                ('reproductivecondition', models.TextField(blank=True, null=True)),
                ('behavior', models.TextField(blank=True, null=True)),
                ('establishmentmeans', models.TextField(blank=True, null=True)),
                ('occurrencestatus', models.TextField(blank=True, null=True)),
                ('preparations', models.TextField(blank=True, null=True)),
                ('disposition', models.TextField(blank=True, null=True)),
                ('associatedreferences', models.TextField(blank=True, null=True)),
                ('associatedsequences', models.TextField(blank=True, null=True)),
                ('associatedtaxa', models.TextField(blank=True, null=True)),
                ('othercatalognumbers', models.TextField(blank=True, null=True)),
                ('occurrenceremarks', models.TextField(blank=True, null=True)),
                ('organismid', models.TextField(blank=True, null=True)),
                ('organismname', models.TextField(blank=True, null=True)),
                ('organismscope', models.TextField(blank=True, null=True)),
                ('associatedoccurrences', models.TextField(blank=True, null=True)),
                ('associatedorganisms', models.TextField(blank=True, null=True)),
                ('previousidentifications', models.TextField(blank=True, null=True)),
                ('organismremarks', models.TextField(blank=True, null=True)),
                ('materialsampleid', models.TextField(blank=True, null=True)),
                ('eventid', models.TextField(blank=True, null=True)),
                ('parenteventid', models.TextField(blank=True, null=True)),
                ('fieldnumber', models.TextField(blank=True, null=True)),
                ('eventdate', models.TextField(blank=True, null=True)),
                ('eventtime', models.TextField(blank=True, null=True)),
                ('startdayofyear', models.TextField(blank=True, null=True)),
                ('enddayofyear', models.TextField(blank=True, null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('month', models.IntegerField(blank=True, null=True)),
                ('day', models.IntegerField(blank=True, null=True)),
                ('verbatimeventdate', models.TextField(blank=True, null=True)),
                ('habitat', models.TextField(blank=True, null=True)),
                ('samplingprotocol', models.TextField(blank=True, null=True)),
                ('samplingeffort', models.TextField(blank=True, null=True)),
                ('samplesizevalue', models.TextField(blank=True, null=True)),
                ('samplesizeunit', models.TextField(blank=True, null=True)),
                ('fieldnotes', models.TextField(blank=True, null=True)),
                ('eventremarks', models.TextField(blank=True, null=True)),
                ('locationid', models.TextField(blank=True, null=True)),
                ('highergeographyid', models.TextField(blank=True, null=True)),
                ('highergeography', models.TextField(blank=True, null=True)),
                ('continent', models.TextField(blank=True, null=True)),
                ('waterbody', models.TextField(blank=True, null=True)),
                ('islandgroup', models.TextField(blank=True, null=True)),
                ('island', models.TextField(blank=True, null=True)),
                ('countrycode', models.TextField(blank=True, null=True)),
                ('stateprovince', models.TextField(blank=True, null=True)),
                ('county', models.TextField(blank=True, null=True)),
                ('municipality', models.TextField(blank=True, null=True)),
                ('locality', models.TextField(blank=True, null=True)),
                ('verbatimlocality', models.TextField(blank=True, null=True)),
                ('verbatimelevation', models.TextField(blank=True, null=True)),
                ('verbatimdepth', models.TextField(blank=True, null=True)),
                ('minimumdistanceabovesurfaceinmeters', models.TextField(blank=True, null=True)),
                ('maximumdistanceabovesurfaceinmeters', models.TextField(blank=True, null=True)),
                ('locationaccordingto', models.TextField(blank=True, null=True)),
                ('locationremarks', models.TextField(blank=True, null=True)),
                ('decimallatitude', models.FloatField(blank=True, null=True)),
                ('decimallongitude', models.FloatField(blank=True, null=True)),
                ('coordinateuncertaintyinmeters', models.TextField(blank=True, null=True)),
                ('coordinateprecision', models.TextField(blank=True, null=True)),
                ('pointradiusspatialfit', models.TextField(blank=True, null=True)),
                ('verbatimcoordinatesystem', models.TextField(blank=True, null=True)),
                ('verbatimsrs', models.TextField(blank=True, null=True)),
                ('footprintwkt', models.TextField(blank=True, null=True)),
                ('footprintsrs', models.TextField(blank=True, null=True)),
                ('footprintspatialfit', models.TextField(blank=True, null=True)),
                ('georeferencedby', models.TextField(blank=True, null=True)),
                ('georeferenceddate', models.TextField(blank=True, null=True)),
                ('georeferenceprotocol', models.TextField(blank=True, null=True)),
                ('georeferencesources', models.TextField(blank=True, null=True)),
                ('georeferenceverificationstatus', models.TextField(blank=True, null=True)),
                ('georeferenceremarks', models.TextField(blank=True, null=True)),
                ('geologicalcontextid', models.TextField(blank=True, null=True)),
                ('earliesteonorlowesteonothem', models.TextField(blank=True, null=True)),
                ('latesteonorhighesteonothem', models.TextField(blank=True, null=True)),
                ('earliesteraorlowesterathem', models.TextField(blank=True, null=True)),
                ('latesteraorhighesterathem', models.TextField(blank=True, null=True)),
                ('earliestperiodorlowestsystem', models.TextField(blank=True, null=True)),
                ('latestperiodorhighestsystem', models.TextField(blank=True, null=True)),
                ('earliestepochorlowestseries', models.TextField(blank=True, null=True)),
                ('latestepochorhighestseries', models.TextField(blank=True, null=True)),
                ('earliestageorloweststage', models.TextField(blank=True, null=True)),
                ('latestageorhigheststage', models.TextField(blank=True, null=True)),
                ('lowestbiostratigraphiczone', models.TextField(blank=True, null=True)),
                ('highestbiostratigraphiczone', models.TextField(blank=True, null=True)),
                ('lithostratigraphicterms', models.TextField(blank=True, null=True)),
                ('group', models.TextField(blank=True, null=True)),
                ('formation', models.TextField(blank=True, null=True)),
                ('member', models.TextField(blank=True, null=True)),
                ('bed', models.TextField(blank=True, null=True)),
                ('identificationid', models.TextField(blank=True, null=True)),
                ('identificationqualifier', models.TextField(blank=True, null=True)),
                ('typestatus', models.TextField(blank=True, null=True)),
                ('identifiedby', models.TextField(blank=True, null=True)),
                ('dateidentified', models.TextField(blank=True, null=True)),
                ('identificationreferences', models.TextField(blank=True, null=True)),
                ('identificationverificationstatus', models.TextField(blank=True, null=True)),
                ('identificationremarks', models.TextField(blank=True, null=True)),
                ('taxonid', models.TextField(blank=True, null=True)),
                ('scientificnameid', models.TextField(blank=True, null=True)),
                ('acceptednameusageid', models.TextField(blank=True, null=True)),
                ('parentnameusageid', models.TextField(blank=True, null=True)),
                ('originalnameusageid', models.TextField(blank=True, null=True)),
                ('nameaccordingtoid', models.TextField(blank=True, null=True)),
                ('namepublishedinid', models.TextField(blank=True, null=True)),
                ('taxonconceptid', models.TextField(blank=True, null=True)),
                ('scientificname', models.TextField(blank=True, null=True)),
                ('acceptednameusage', models.TextField(blank=True, null=True)),
                ('parentnameusage', models.TextField(blank=True, null=True)),
                ('originalnameusage', models.TextField(blank=True, null=True)),
                ('nameaccordingto', models.TextField(blank=True, null=True)),
                ('namepublishedin', models.TextField(blank=True, null=True)),
                ('namepublishedinyear', models.TextField(blank=True, null=True)),
                ('higherclassification', models.TextField(blank=True, null=True)),
                ('kingdom', models.TextField(blank=True, null=True)),
                ('phylum', models.TextField(blank=True, null=True)),
                ('class_field', models.TextField(blank=True, db_column='class', null=True)),
                ('order1', models.TextField(blank=True, null=True)),
                ('family', models.TextField(blank=True, null=True)),
                ('genus', models.TextField(blank=True, null=True)),
                ('subgenus', models.TextField(blank=True, null=True)),
                ('specificepithet', models.TextField(blank=True, null=True)),
                ('infraspecificepithet', models.TextField(blank=True, null=True)),
                ('taxonrank', models.TextField(blank=True, null=True)),
                ('verbatimtaxonrank', models.TextField(blank=True, null=True)),
                ('vernacularname', models.TextField(blank=True, null=True)),
                ('nomenclaturalcode', models.TextField(blank=True, null=True)),
                ('taxonomicstatus', models.TextField(blank=True, null=True)),
                ('nomenclaturalstatus', models.TextField(blank=True, null=True)),
                ('taxonremarks', models.TextField(blank=True, null=True)),
                ('datasetkey', models.TextField(blank=True, null=True)),
                ('publishingcountry', models.TextField(blank=True, null=True)),
                ('lastinterpreted', models.TextField(blank=True, null=True)),
                ('elevation', models.TextField(blank=True, null=True)),
                ('elevationaccuracy', models.TextField(blank=True, null=True)),
                ('depth', models.TextField(blank=True, null=True)),
                ('depthaccuracy', models.TextField(blank=True, null=True)),
                ('distanceabovesurface', models.TextField(blank=True, null=True)),
                ('distanceabovesurfaceaccuracy', models.TextField(blank=True, null=True)),
                ('issue', models.TextField(blank=True, null=True)),
                ('mediatype', models.TextField(blank=True, null=True)),
                ('hascoordinate', models.TextField(blank=True, null=True)),
                ('hasgeospatialissues', models.TextField(blank=True, null=True)),
                ('taxonkey', models.TextField(blank=True, null=True)),
                ('acceptedtaxonkey', models.TextField(blank=True, null=True)),
                ('kingdomkey', models.IntegerField(blank=True, null=True)),
                ('phylumkey', models.IntegerField(blank=True, null=True)),
                ('classkey', models.IntegerField(blank=True, null=True)),
                ('orderkey', models.IntegerField(blank=True, null=True)),
                ('familykey', models.IntegerField(blank=True, null=True)),
                ('genuskey', models.IntegerField(blank=True, null=True)),
                ('subgenuskey', models.IntegerField(blank=True, null=True)),
                ('specieskey', models.IntegerField(blank=True, null=True)),
                ('species', models.TextField(blank=True, null=True)),
                ('genericname', models.TextField(blank=True, null=True)),
                ('acceptedscientificname', models.TextField(blank=True, null=True)),
                ('verbatimscientificname', models.TextField(blank=True, null=True)),
                ('typifiedname', models.TextField(blank=True, null=True)),
                ('protocol', models.TextField(blank=True, null=True)),
                ('lastparsed', models.TextField(blank=True, null=True)),
                ('lastcrawled', models.TextField(blank=True, null=True)),
                ('repatriated', models.TextField(blank=True, null=True)),
                ('relativeorganismquantity', models.TextField(blank=True, null=True)),
                ('recordedbyid', models.TextField(blank=True, null=True)),
                ('identifiedbyid', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'testing_subset',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TestSelectBird',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gbifid', models.TextField(blank=True, null=True)),
                ('individualcount', models.IntegerField(blank=True, null=True)),
                ('vernacularname', models.TextField(blank=True, null=True)),
                ('dates_id', models.IntegerField(blank=True, null=True)),
                ('genus_id', models.IntegerField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('species_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'test_select_bird',
                'managed': False,
            },
        ),
    ]
